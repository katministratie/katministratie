@using Superkatten.Katministratie.Host.Services
@using Superkatten.Katministratie.Application.Entities
@using Superkatten.Katministratie.Infrastructure.Entities;

@inject NavigationManager _navigationManager
@inject ISuperkatActionService _superkatActionService
@inject IPrinterService _printerService;

<div class="container">
    <div class="row">
        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleReserve"
                ActionIcon="@(Superkat.Reserved ? "./images/actions/briefcase.svg" : "./images/actions/briefcase-fill.svg")" />
        </div>

        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleRetour"
                ActionIcon="@(Superkat.Retour ? "./images/actions/arrow-down-up.svg" : "./images/actions/arrow-down-up.svg")" />
        </div>

        
        <div class="col-3">
            <SuperkatAction
            OnClickCallback="@CreateSuperkatCard"
            ActionIcon="@(Superkat.Retour ? "./images/actions/printer.svg" : "./images/actions/printer.svg")" />
        </div>
        
    </div>
</div>

<Modal Title="@_modelTitle"
       Visible="@_modelVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
        @foreach(var printer in Printers)
        {
            <Button OnClick="() => { PrintAt(printer.Name); }">@printer.Name</Button>
        }
</Modal>

@code {
    [Parameter]
    public Superkat Superkat { get; set; } = new();

    [Parameter]
    public EventCallback<Superkat> SuperkatChanged { get; set; }

    private async Task ToggleReserve()
    {
        await _superkatActionService.ToggleReserveSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(!Superkat.Reserved, Superkat.Retour);
    }

    private async Task ToggleRetour()
    {
        await _superkatActionService.ToggleRetourSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(Superkat.Reserved, !Superkat.Retour);
    }

    private async Task CreateSuperkatCard()
    {
        if (Printers.Count > 0)
        {
            _modelTitle = "Kies een printer uit:";
            _modelVisible = true;
        }
        else
        {
            _modelTitle = "Geen printers gevonden";
            _modelVisible = true;
        }
    }

    private async Task UpdateSuperkat(bool reserve, bool retour)
    {
        await SuperkatChanged.InvokeAsync(Superkat = new Superkat
        {
            Name = Superkat.Name,
            Birthday = Superkat.Birthday,
            CatchLocation = Superkat.CatchLocation,
            CatchDate = Superkat.CatchDate,
            Number = Superkat.Number,
            Reserved = reserve,
            Retour = retour,
            Area = Superkat.Area,
            CageNumber = Superkat.CageNumber
        });
    }



    bool _modelVisible = false;
    string _modelTitle = "BasicModal";
    string _selectedPrinter = string.Empty;

    private async Task HandleOk(MouseEventArgs e)
    {
        await _superkatActionService.CreateSuperkatCardAsync(Superkat.Id);
        // print at selectedprinter
        _modelVisible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _modelVisible = false;
    }

    private List<Printer> Printers { get; set; } = new();

    private void PrintAt(string printerName)
    {
        _selectedPrinter = printerName;
    }

    protected async override Task OnInitializedAsync()
    {
        Printers = await _printerService.GetPrintersAsync();
    }
}
