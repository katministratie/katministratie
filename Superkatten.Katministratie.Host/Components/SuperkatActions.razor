@using Superkatten.Katministratie.Host.Services
@using Superkatten.Katministratie.Application.Entities
@using Superkatten.Katministratie.Infrastructure.Entities;

@inject NavigationManager _navigationManager
@inject ISuperkatActionService _superkatActionService
@inject IPrinterService _printerService;

<Modal Title="@_modelTitle"
       Visible="@_modelVisible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel">
        @childContent
</Modal>

<div class="container">
    <div class="row">
        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleReserve"
                ActionIcon="@(Superkat.Reserved ? "./images/actions/briefcase.svg" : "./images/actions/briefcase-fill.svg")" />
        </div>

        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleRetour"
                ActionIcon="@(Superkat.Retour ? "./images/actions/arrow-down-up.svg" : "./images/actions/arrow-down-up.svg")" />
        </div>

        @if (Printers.Count > 0)
        {
            <div class="col-3">
                <SuperkatAction
                OnClickCallback="@CreateSuperkatCard"
                ActionIcon="@(Superkat.Retour ? "./images/actions/printer.svg" : "./images/actions/printer.svg")" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Superkat Superkat { get; set; } = new();

    [Parameter]
    public EventCallback<Superkat> SuperkatChanged { get; set; }

    private async Task ToggleReserve()
    {
        await _superkatActionService.ToggleReserveSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(!Superkat.Reserved, Superkat.Retour);
    }

    private async Task ToggleRetour()
    {
        await _superkatActionService.ToggleRetourSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(Superkat.Reserved, !Superkat.Retour);
    }

    private async Task CreateSuperkatCard()
    { 
        _modelTitle = "Kies een printer uit:";
        _modelVisible = true;
        await _superkatActionService.CreateSuperkatCard(Superkat.Id);
       
    }

    private async Task UpdateSuperkat(bool reserve, bool retour)
    {
        await SuperkatChanged.InvokeAsync(Superkat = new Superkat
        {
            Name = Superkat.Name,
            Birthday = Superkat.Birthday,
            CatchLocation = Superkat.CatchLocation,
            CatchDate = Superkat.CatchDate,
            Number = Superkat.Number,
            Reserved = reserve,
            Retour = retour,
            Area = Superkat.Area,
            CageNumber = Superkat.CageNumber
        });
    }



    bool _modelVisible = false;
    string _modelTitle = "BasicModal";

    private void HandleOk(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _modelVisible = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine(e);
        _modelVisible = false;
    }
    
    private RenderFragment childContent { get; set; }

    private List<Printer> Printers { get; set; } = new();

    private RenderFragment AddPrinterList() => builder =>
    {
        @foreach (var printer in Printers)
        {
            builder.OpenElement(2, "Button");
            builder.AddAttribute(2, "Block");
            builder.AddAttribute(2, "OnClick", SelectPrinter);
            builder.AddContent(2, printer.Name);
            builder.CloseElement();
            builder.OpenElement(3, "br");
            builder.CloseElement();
        }
    };

    private void SelectPrinter()
    {
        
    }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Printers = await _printerService.GetPrintersAsync();
        childContent = AddPrinterList();
    }
}
