@using Superkatten.Katministratie.Domain.Contracts
@using Superkatten.Katministratie.Host.Services
@using Superkatten.Katministratie.Application.Entities
@using Superkatten.Katministratie.Infrastructure.Entities;

@inject NavigationManager _navigationManager
@inject ISuperkatActionService _superkatActionService
@inject IPrinterService _printerService;

<div class="container">
    <div class="row">
        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleReserve"
                ActionIcon="@(Superkat.Reserved ? "./images/actions/briefcase.svg" : "./images/actions/briefcase-fill.svg")" />
        </div>

        <div class="col-3">
            <SuperkatAction
                OnClickCallback="@ToggleRetour"
                ActionIcon="@(Superkat.Retour ? "./images/actions/arrow-down-up.svg" : "./images/actions/arrow-down-up.svg")" />
        </div>
        
        <div class="col-3">
            <SuperkatAction
            OnClickCallback="@ShowPrinterSelectDialog"
            ActionIcon="./images/actions/printer.svg" />
        </div>        
    </div>
</div>

<PrinterSelectDialog
    IsVisible="@PrinterDialogVisible" 
    OnPrint="async (string printername) => { await PrintSuperkatCageCardAsync(printername); }"
    OnClose="() => { PrinterDialogVisible = false; }" />

@code {
    [Parameter]
    public Superkat Superkat { get; set; } = new();

    [Parameter]
    public EventCallback<Superkat> SuperkatChanged { get; set; }

    private bool PrinterDialogVisible { get; set; } = false;

    private async Task ToggleReserve()
    {
        await _superkatActionService.ToggleReserveSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(!Superkat.Reserved, Superkat.Retour);
    }

    private async Task ToggleRetour()
    {
        await _superkatActionService.ToggleRetourSuperkatAsync(Superkat.Number);
        await UpdateSuperkat(Superkat.Reserved, !Superkat.Retour);
    }

    private void ShowPrinterSelectDialog()
    {
        PrinterDialogVisible = true;
    }

    private async Task PrintSuperkatCageCardAsync(string printername)
    {
        var parameters = new SuperkatCageCardPrintParameters
        {
            Id = Superkat.Id,
            PrinterName = printername
        };
        await _superkatActionService.PrintSuperkatCageCardAsync(parameters);
    }

    private async Task UpdateSuperkat(bool reserve, bool retour)
    {
        await SuperkatChanged.InvokeAsync(Superkat = new Superkat
        {
            Name = Superkat.Name,
            Birthday = Superkat.Birthday,
            CatchLocation = Superkat.CatchLocation,
            CatchDate = Superkat.CatchDate,
            Number = Superkat.Number,
            Reserved = reserve,
            Retour = retour,
            Area = Superkat.Area,
            CageNumber = Superkat.CageNumber
        });
    }    
}
