@page "/"

@using Superkatten.Katministratie.Contract.ApiInterface.Reporting
@using Superkatten.Katministratie.Host.Components
@using Superkatten.Katministratie.Host.Helpers
@using Superkatten.Katministratie.Host.Services
@using Superkatten.Katministratie.Host.Services.Interfaces
@using Superkatten.Katministratie.Host.Services.Authentication


<PageTitle>Superkatten</PageTitle>

@if (!IsAuthenticated)
{
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnRegister">Register</Button>
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnLogin">Login</Button>
}
else
{
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnLogout">Logout</Button>
    
    <Divider />
    
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnCreateSuperkat">Nieuwe kat</Button>
    
    <Divider />
    
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnShowOverviewSuperkatten">Katten</Button>
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnShowOverviewGastgezinnen">Gastgezinnen</Button>
    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnShowMedicalProcedures">Medische handelingen</Button>

    <Divider />

    <Button Block Size="Size.Large" Color="Color.Primary" Clicked="@OnCreateWakkerDierInventoryReport">Wakker dier inventarisatie formulier</Button>
}

<Modal @ref="modalRef">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Inloggen</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>Gebruikersnaam</FieldLabel>
                <TextEdit Role="TextRole.Text" 
                          MaskType="MaskType.RegEx" 
                          EditMask="^[a-z]*$" 
                          @bind-Text="@loginModel.Username" 
                          Placeholder="Vul de gebruikersnaam in..." 
                          KeyPress="@OnKeyPress"/>
            </Field>
            <Field>
                <FieldLabel>Wachtwoord</FieldLabel>
                <TextEdit Role="TextRole.Password" 
                          @bind-Text="@loginModel.Password" 
                          Placeholder="Vul je wachtwoord in..."
                          KeyPress="@OnKeyPress"/>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@HideModal">Sluiten</Button>
            <Button Color="Color.Primary" Clicked="@SaveAndHideModal">Ok</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    private class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;

        public bool AllFilledIn => !string.IsNullOrEmpty(Username) && !string.IsNullOrEmpty(Password);
    }

    private LoginModel? loginModel;
    private Modal modalRef;
    private bool IsAuthenticated => _authenticationService.IsAuthenticated;

    [Inject]
    public Navigation _navigation { get; set; }

    [Inject]
    public ISuperkattenListService _superkattenService { get; set; }

    [Inject]
    public IAuthenticationService _authenticationService { get; set; }

    [Inject]
    public IReportingService ReportingService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await _authenticationService.InitializeAsync();
    }

    private void OnRegister()
    {
        _navigation.NavigateTo("Register");
    }

    private async Task OnLogin()
    {
        loginModel = new();
        await modalRef.Show();
    }

    private async Task OnLogout()
    {
        await _authenticationService.LogoutAsync();
    }

    private void OnCreateSuperkat()
    {
        _navigation.NavigateTo("CreateSuperkat");
    }

    private void OnShowOverviewSuperkatten()
    {
        _navigation.NavigateTo("OverviewSuperkatten");
    }

    private void OnShowOverviewGastgezinnen()
    {
        _navigation.NavigateTo("OverviewGastgezinnen");
    }

    private void OnShowMedicalProcedures()
    {
        _navigation.NavigateTo("OverviewMedicalProcedures");
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task SaveAndHideModal()
    {
        if (loginModel is not null)
        {
            await _authenticationService.AuthenticateUserAsync(loginModel.Username, loginModel.Password);
        }

        await modalRef.Hide();
    }

    private async Task OnKeyPress(KeyboardEventArgs eventArgs)
    {
        if(eventArgs.Key != "Enter" || loginModel is not null && !loginModel.AllFilledIn)
        {
            return;
        }

        await SaveAndHideModal();        
    }

    private async Task OnCreateWakkerDierInventoryReport()
    {
        var requestParameters = new RequestCatchLocationEmailParameters
        {
            Email = "johandekroon@gmail.com",
            From = DateTime.UtcNow.AddDays(-1),
            To = DateTime.UtcNow.AddDays(1)
        };

        await ReportingService.EmailInventoryDetailsReport(requestParameters);
    }
}