@page "/login"
@using System.ComponentModel.DataAnnotations
@using Superkatten.Katministratie.Host.Helpers
@using Superkatten.Katministratie.Host.Services
@using Superkatten.Katministratie.Host.Services.Authentication

@inject IAuthenticationService AuthenticationService
@inject NavigationManager NavigationManager

<Button Size="Size.Large" Color="Color.Primary" Clicked="@OnBackHome">Terug</Button>


<Field>
    <TextEdit Placeholder="Username" Role="TextRole.Email" @bind-Text="@model.Username" MaskType="MaskType.RegEx" EditMask="^[a-z]*$" />
    <TextEdit Placeholder="Wachtwoord" Role="TextRole.Password" @bind-Text="@model.Password" />

    <Button Size="Size.Large" Color="Color.Primary" Clicked="@HandleValidSubmit">Ok</Button>
    <Button Size="Size.Large" Color="Color.Primary" Clicked="@OnBackHome">Terug</Button>
</Field>



@code {
    private Model model = new Model();
    private bool loading;
    private string error = string.Empty;

    protected override void OnInitialized()
    {
        // redirect to home if already logged in
        if (AuthenticationService.User != null)
        {
            NavigationManager.NavigateTo("");
        }
    }

    private async void HandleValidSubmit()
    {
        loading = true;
        try
        {
            await AuthenticationService.AuthenticateUserAsync(model.Username, model.Password);

            var returnUrl = NavigationManager.QueryString("returnUrl") ?? "";
            NavigationManager.NavigateTo(returnUrl);
        }
        catch (Exception ex)
        {
            error = ex.Message;
            loading = false;
            StateHasChanged();
        }
    }

    private void OnBackHome()
    {
        NavigationManager.NavigateTo("");
    }

    private class Model
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
}