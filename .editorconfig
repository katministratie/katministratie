# Rules in this file were initially inferred by Visual Studio IntelliCode from the C:\Users\Seinde\source\repos\MonitoringStation\ms-backend codebase based on best match to current usage at 25-6-2021
# You can modify the rules from these initially generated values to suit your own policies
# You can learn more about editorconfig here: https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference
[*.cs]


#Core editorconfig formatting - indentation

#use soft tabs (spaces) for indentation
indent_style = space

#Formatting - indentation options

#indent switch case contents.
csharp_indent_case_contents = true
#indent switch labels
csharp_indent_switch_labels = true

#Formatting - new line options

#place catch statements on a new line
csharp_new_line_before_catch = true
#place else statements on a new line
csharp_new_line_before_else = true
#require finally statements to be on a new line after the closing brace
csharp_new_line_before_finally = true
#require members of anonymous types to be on separate lines
csharp_new_line_before_members_in_anonymous_types = true
#require members of object intializers to be on separate lines
csharp_new_line_before_members_in_object_initializers = true
#require braces to be on a new line for object_collection_array_initializers, control_blocks, types, anonymous_types, properties, accessors, and methods (also known as "Allman" style)
csharp_new_line_before_open_brace =all
#Formatting - organize using options

#do not place System.* using directives before other using directives
dotnet_sort_system_directives_first = false

#Formatting - spacing options

#require NO space between a cast and the value
csharp_space_after_cast = false
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_after_colon_in_inheritance_clause = true
#require a space after a keyword in a control flow statement such as a for loop
csharp_space_after_keywords_in_control_flow_statements = true
#require a space before the colon for bases or interfaces in a type declaration
csharp_space_before_colon_in_inheritance_clause = true
#remove space within empty argument list parentheses
csharp_space_between_method_call_empty_parameter_list_parentheses = false
#remove space between method call name and opening parenthesis
csharp_space_between_method_call_name_and_opening_parenthesis = false
#do not place space characters after the opening parenthesis and before the closing parenthesis of a method call
csharp_space_between_method_call_parameter_list_parentheses = false
#remove space within empty parameter list parentheses for a method declaration
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
#place a space character after the opening parenthesis and before the closing parenthesis of a method declaration parameter list.
csharp_space_between_method_declaration_parameter_list_parentheses = false

#Formatting - wrapping options

#leave code block on single line
csharp_preserve_single_line_blocks = true
#leave statements and member declarations on the same line
csharp_preserve_single_line_statements = true

#Style - Code block preferences

#prefer curly braces even for one line of code
csharp_prefer_braces = true:error

#Style - expression bodied member options

#prefer block bodies for accessors
csharp_style_expression_bodied_accessors = false:suggestion
#prefer block bodies for methods
csharp_style_expression_bodied_methods = false:suggestion
#prefer block bodies for properties
csharp_style_expression_bodied_properties = when_on_single_line:suggestion

#Style - expression level options

#prefer out variables to be declared inline in the argument list of a method call when possible
csharp_style_inlined_variable_declaration = true:suggestion
#prefer tuple names to ItemX properties
dotnet_style_explicit_tuple_names = true:suggestion
#prefer the language keyword for member access expressions, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_member_access = true:suggestion

#Style - Expression-level  preferences

#prefer objects to be initialized using object initializers when possible
dotnet_style_object_initializer = true:suggestion
#prefer inferred anonymous type member names
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
#prefer inferred tuple element names
dotnet_style_prefer_inferred_tuple_names = true:suggestion

#Style - implicit and explicit types

#prefer var over explicit type in all cases, unless overridden by another code style rule
csharp_style_var_elsewhere = true:suggestion
#prefer var is used to declare variables with built-in system types such as int
csharp_style_var_for_built_in_types = true:suggestion
#prefer var when the type is already mentioned on the right-hand side of a declaration expression
csharp_style_var_when_type_is_apparent = true:suggestion

# CA2007: Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2007.severity = none

#Style - language keyword and framework type options

#prefer the language keyword for local variables, method parameters, and class members, instead of the type name, for types that have a keyword to represent them
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion

#Style - modifier options

#prefer accessibility modifiers to be declared except for public interface members. This will currently not differ from always and will act as future proofing for if C# adds default interface methods.
dotnet_style_require_accessibility_modifiers = for_non_interface_members:suggestion

#Style - Modifier preferences

#when this rule is set to a list of modifiers, prefer the specified ordering.
csharp_preferred_modifier_order = public,private,internal,protected,readonly,async,override,virtual,static:suggestion

#Style - Pattern matching

#prefer pattern matching instead of is expression with type casts
csharp_style_pattern_matching_over_as_with_null_check =true:warning

#Style - qualification options

#prefer fields not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_field = false:suggestion
#prefer methods not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_method = false:suggestion
#prefer properties not to be prefaced with this. or Me. in Visual Basic
dotnet_style_qualification_for_property = false:suggestion
csharp_prefer_simple_using_statement=true:warning
csharp_style_expression_bodied_lambdas=true:suggestion
csharp_style_throw_expression=true:warning
csharp_prefer_simple_default_expression=true:warning
csharp_style_pattern_local_over_anonymous_function=true:warning
csharp_style_prefer_switch_expression=true:warning
csharp_style_prefer_pattern_matching=true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check=true:warning
csharp_style_prefer_not_pattern=true:warning

# CA1062: Validate arguments of public methods
dotnet_diagnostic.CA1062.severity = none

# CA1812: Avoid uninstantiated internal classes
dotnet_diagnostic.CA1812.severity = none

# Code block preferences
csharp_style_namespace_declarations = file_scoped

[*.{cs,vb}]
dotnet_style_coalesce_expression=true:warning
dotnet_style_null_propagation=true:warning
dotnet_style_prefer_is_null_check_over_reference_equality_method=true:warning
dotnet_style_prefer_auto_properties=true:warning
dotnet_style_object_initializer=true:warning
dotnet_style_collection_initializer=true:warning
dotnet_style_prefer_simplified_boolean_expressions=true:warning
dotnet_style_prefer_conditional_expression_over_assignment=true:suggestion
dotnet_style_prefer_conditional_expression_over_return=true:suggestion
dotnet_style_explicit_tuple_names=false:suggestion
dotnet_style_prefer_compound_assignment=true:warning
dotnet_style_readonly_field=true:warning
dotnet_style_predefined_type_for_locals_parameters_members=true:error
dotnet_code_quality_unused_parameters=all:warning
dotnet_style_qualification_for_field=false:warning
dotnet_style_qualification_for_property=false:warning
dotnet_style_qualification_for_method=false:warning
dotnet_style_qualification_for_event=false:warning

# Naming conventions
## Symbol kinds
dotnet_diagnostics.IDE1006.severity = error
dotnet_naming_symbols.inline_variables.applicable_kinds = parameter,local
dotnet_naming_symbols.inline_variables.applicable_accessibilities = local

dotnet_naming_symbols.class_names.applicable_kinds = enum,class,struct,interface
dotnet_naming_symbols.class_names.applicable_accessibilities = *

dotnet_naming_symbols.public_members.applicable_kinds = property,field,event
dotnet_naming_symbols.public_members.applicable_accessibilities = public,internal,protected,protected_internal

dotnet_naming_symbols.private_members.applicable_kinds = field,event
dotnet_naming_symbols.private_members.applicable_accessibilities = private,private_protected

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *

dotnet_naming_symbols.constants.applicable_kinds = *
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const

## Style guides
dotnet_naming_style.camel_case.capitalization = camel_case
dotnet_naming_style.camel_case_with_underscore.capitalization = camel_case
dotnet_naming_style.camel_case_with_underscore.required_prefix = _
dotnet_naming_style.full_upper_case.capitalization = all_upper
dotnet_naming_style.full_upper_case.word_separator = _
dotnet_naming_style.pascal_case.capitalization = pascal_case
dotnet_naming_style.prefix_with_i.capitalization = pascal_case
dotnet_naming_style.prefix_with_i.required_prefix = I
## Naming rules
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.style = prefix_with_i
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.severity = error

dotnet_naming_rule.constants_should_be_upper.symbols = constants
dotnet_naming_rule.constants_should_be_upper.style = full_upper_case
dotnet_naming_rule.constants_should_be_upper.severity = error

dotnet_naming_rule.local_vars_should_be_camel_Case.symbols = inline_variables
dotnet_naming_rule.local_vars_should_be_camel_Case.style = camel_case
dotnet_naming_rule.local_vars_should_be_camel_Case.severity = error

dotnet_naming_rule.class_names_should_be_pascal_case.symbols = class_names
dotnet_naming_rule.class_names_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.class_names_should_be_pascal_case.severity = error

dotnet_naming_rule.public_members_should_be_pascal_case.symbols = public_members
dotnet_naming_rule.public_members_should_be_pascal_case.style = pascal_case
dotnet_naming_rule.public_members_should_be_pascal_case.severity = error

dotnet_naming_rule.private_members_should_be_camel_case_with_underscore.symbols = private_members
dotnet_naming_rule.private_members_should_be_camel_case_with_underscore.style = camel_case_with_underscore
dotnet_naming_rule.private_members_should_be_camel_case_with_underscore.severity = error
# Exclusions
[**/Migrations/**]
dotnet_analyzer_diagnostic.severity = none